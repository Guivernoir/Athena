cmake_minimum_required(VERSION 3.16)
project(quantizer VERSION 1.0.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Build type configuration
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Compiler-specific optimizations
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -Wall -Wextra -Wpedantic")
    set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -march=native -mtune=native")
    
    # SIMD support detection
    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag("-mavx2" COMPILER_SUPPORTS_AVX2)
    check_cxx_compiler_flag("-msse4.2" COMPILER_SUPPORTS_SSE42)
    
    if(COMPILER_SUPPORTS_AVX2)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2")
        add_definitions(-DHAVE_AVX2)
    elseif(COMPILER_SUPPORTS_SSE42)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.2")
        add_definitions(-DHAVE_SSE42)
    endif()
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set(CMAKE_CXX_FLAGS_DEBUG "/Zi /Ob0 /Od /RTC1 /W4")
    set(CMAKE_CXX_FLAGS_RELEASE "/O2 /Ob2 /DNDEBUG /arch:AVX2")
    add_definitions(-DHAVE_AVX2)
endif()

# Source files
set(SOURCES
    kernels.cpp
    quantizer.cpp
)

set(HEADERS
    kernels.hpp
    quantizer.hpp
)

# Create shared library (for FFI compatibility)
add_library(quantizer SHARED ${SOURCES} ${HEADERS})

# Create static library as well (for direct linking)
add_library(quantizer_static STATIC ${SOURCES} ${HEADERS})

# Set target properties
set_target_properties(quantizer PROPERTIES
    VERSION ${PROJECT_VERSION}
    SOVERSION 1
    PUBLIC_HEADER "${HEADERS}"
    POSITION_INDEPENDENT_CODE ON
)

set_target_properties(quantizer_static PROPERTIES
    OUTPUT_NAME quantizer
    PUBLIC_HEADER "${HEADERS}"
    POSITION_INDEPENDENT_CODE ON
)

# Include directories
target_include_directories(quantizer PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<INSTALL_INTERFACE:include>
)

target_include_directories(quantizer_static PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<INSTALL_INTERFACE:include>
)

# Link libraries (none required for basic functionality)
# target_link_libraries(quantizer PRIVATE m) # Uncomment if using advanced math functions

# Installation rules
include(GNUInstallDirs)

install(TARGETS quantizer quantizer_static
    EXPORT quantizerTargets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

# Export configuration
install(EXPORT quantizerTargets
    FILE quantizerTargets.cmake
    NAMESPACE quantizer::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/quantizer
)

# Create package configuration files
include(CMakePackageConfigHelpers)

configure_package_config_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/quantizerConfig.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/quantizerConfig.cmake"
    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/quantizer
)

write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/quantizerConfigVersion.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

install(FILES
    "${CMAKE_CURRENT_BINARY_DIR}/quantizerConfig.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/quantizerConfigVersion.cmake"
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/quantizer
)

# Optional: Build tests
option(BUILD_TESTS "Build test suite" OFF)
if(BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()

# Optional: Build benchmarks
option(BUILD_BENCHMARKS "Build benchmark suite" OFF)
if(BUILD_BENCHMARKS)
    add_subdirectory(benchmarks)
endif()

# Print configuration summary
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID}")
if(COMPILER_SUPPORTS_AVX2)
    message(STATUS "SIMD support: AVX2")
elseif(COMPILER_SUPPORTS_SSE42)
    message(STATUS "SIMD support: SSE4.2")
else()
    message(STATUS "SIMD support: None detected")
endif()